ifndef PROOT
$(errpr Failed to package, no project directory is specified!)
endif

ifndef INSTANCE
$(error Failed to package, no instance is specified!)
endif

ifndef SUBSYSTEM
$(error Failed to package, no subsystem is specified!)
endif

include $(PROOT)/build/$(SUBSYSTEM)/Makefile.export

ifndef ROOTFS
$(error Failed to package $(SUBSYSTEM), no rootfs is specified!)
endif

ifndef LINUX_KERNEL
$(error Failed to package $(SUBSYSTEM), no linux kernel is specified!)
endif

ifndef HW_DESCRIPTION
$(error Failed to package $(SUBSYSTEM), no hw-description is specified!)
endif

include $(PROOT)/build/$(ROOTFS)/Makefile.export

include $(PETALINUX)/etc/build/common.mk

ifndef TARGETDIR
$(error Failed to package $(SUBSYSTEM), no target root directory is specified!)
endif

get-package-kernel-availables:

ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ARCH_ARM=y" "$(SUBSYSTEM_CONFIG)"),)
package-kernel-zImage:
	@$(call do_info,"package zImage")
	make INSTANCE=$(LINUX_KERNEL) -C $(PROOT)/build/$(LINUX_KERNEL) zImage_only install
	if [ -f $(PROOT)/build/$(LINUX_KERNEL)/boot/zImage ]; then \
		cp $(PROOT)/build/$(LINUX_KERNEL)/boot/zImage $(IMAGEROOT)/; \
	fi

package-kernel-default: package-kernel-zImage
endif

package-kernel-uImage:
	@$(call do_info,"package uImage")
	@kernel_loadaddr=$(shell grep -e "^CONFIG_SUBSYSTEM_KERNEL_BASE_ADDRESS=" "$(SUBSYSTEM_CONFIG)" | cut -d "=" -f 2 ); \
	make INSTANCE=$(LINUX_KERNEL) UIMAGE_LOADADDR=$${kernel_loadaddr} -C $(PROOT)/build/$(LINUX_KERNEL) uImage_only install || exit 255
	if [ -f $(PROOT)/build/$(LINUX_KERNEL)/boot/uImage ]; then \
		cp $(PROOT)/build/$(LINUX_KERNEL)/boot/uImage $(IMAGEROOT)/; \
	fi

ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ARCH_MICROBLAZE=y" "$(SUBSYSTEM_CONFIG)"),)
package-kernel-simpleImage.mb: $(PROOT)/build/$(LINUX_KERNEL)/boot $(PROOT)/build/$(SUBSYSTEM)/hw-description/system.dtb
	@$(call do_info,"package simpleImage.mb")
	kernel_loadaddr=$(shell grep -e "^CONFIG_SUBSYSTEM_KERNEL_BASE_ADDRESS=" "$(SUBSYSTEM_CONFIG)" | cut -d "=" -f 2 ); \
	mkdir -p $(PROOT)/build/$(LINUX_KERNEL)/boot/dts; \
	cp $(PROOT)/build/$(SUBSYSTEM)/hw-description/system.dtb $(PROOT)/build/$(LINUX_KERNEL)/boot/dts/mb.dtb; \
	cp $(PROOT)/build/$(SUBSYSTEM)/hw-description/system.dtb $(PROOT)/build/$(LINUX_KERNEL)/boot/mb.dtb; \
	make INSTANCE=$(LINUX_KERNEL) UIMAGE_LOADADDR=$${kernel_loadaddr} -C $(PROOT)/build/$(LINUX_KERNEL) simpleImage.mb_only install || exit 255
	${CROSS_COMPILE}strip -K microblaze_start -K arm_start -K _end -K __log_buf -K _fdt_start $(IMAGEROOT)/vmlinux -o ${IMAGEROOT}/image.elf

package-kernel-default: package-kernel-simpleImage.mb
endif

update-kernel-package: package-rootfs-initramfs
	@$(call do_info,"Update and install vmlinux image")
	make INSTANCE=$(LINUX_KERNEL) -C $(PROOT)/build/$(LINUX_KERNEL) vmlinux_only install || exit 255

generate-image-elf:
	${CROSS_COMPILE}strip -K microblaze_start -K arm_start -K _end -K __log_buf -K _fdt_start $(IMAGEROOT)/vmlinux -o ${IMAGEROOT}/image.elf

package-kernel-zImage package-kernel-uImage package-kernel-simpleImage.mb : generate-image-elf

ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ROOTFS_INITRAMFS=y" "$(SUBSYSTEM_CONFIG)"),)
package-kernel-zImage package-kernel-uImage package-kernel-simpleImage.mb : update-kernel-package
generate-image-elf: update-kernel-package
endif

get-package-rootfs-available:
	echo "jffs2 initramfs nfsroot"

package-rootfs-jffs2:
	@$(call do_info, "package rootfs.jffs2 to $(IMAGEROOT)")
	petalinux-gen-jffs2 -d $(TARGETDIR) -o "$(IMAGEROOT)/rootfs.jffs2" --sysconfig "$(SUBSYSTEM_CONFIG)"

package-rootfs-initramfs:
	@$(call do_info,"package rootfs.cpio to $(IMAGEROOT)")
	petalinux-gen-initrd -d $(TARGETDIR) -o "$(IMAGEROOT)/rootfs.cpio" --linux-build "$(PROOT)/build/$(LINUX_KERNEL)" || exit 255

package-rootfs-nfsroot:
	@$(call do_info,"package nfsroot")
	petalinux-gen-nfsroot -d $(TARGETDIR) --sysconfig "$(SUBSYSTEM_CONFIG)" || exit 255

ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ROOTFS_INITRAMFS=y" "$(SUBSYSTEM_CONFIG)"),)
package-rootfs-default:package-rootfs-initramfs
else
ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ROOTFS_JFFS2=y" "$(SUBSYSTEM_CONFIG)"),)
package-rootfs-default:package-rootfs-jffs2
else
ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ROOTFS_NFS=y" "$(SUBSYSTEM_CONFIG)"),)
package-rootfs-default:package-rootfs-nfsroot
else
package-rootfs-default:
endif
endif
endif

package-subsystem:package-kernel-default package-subsystem-default package-rootfs-default relocate-uboot
ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_COPY_TO_TFTPBOOT=y" "$(SUBSYSTEM_CONFIG)"),)
	tftpboot=$$(grep -e "^CONFIG_SUBSYSTEM_TFTPBOOT_DIR=" "$(SUBSYSTEM_CONFIG)" | awk -F "=" '{print $$2}' | tr -d '"'); \
	if [ "$${TFTPDIR_DISABLE}" != "TRUE" ]; then \
		rsync -a "$(IMAGEROOT)"/* "$${tftpboot}/"; \
		if [ ! $$? -eq 0 ]; then \
			$(call do_info,"Failed to copy images to TFTPBOOT $${tftpboot}"); \
		fi; \
	fi
endif

$(IMAGEROOT)/vmlinux:package-kernel-default

package-subsystem-default:package-subsystem-FIT

package-subsystem-FIT: package-kernel-default $(IMAGEROOT)/vmlinux $(PROOT)/subsystems/$(SUBSYSTEM)/hw-description/system.dts
	@$(call do_info,"package FIT image")
	@kernel_loadaddr=$(shell grep -e "^CONFIG_SUBSYSTEM_KERNEL_BASE_ADDRESS=" "$(SUBSYSTEM_CONFIG)" | cut -d "=" -f 2 ); \
	[ ! -z "$${kernel_loadaddr}" ] && kernel_loadaddr="-l $${kernel_loadaddr}"; \
	uimage=$$(grep -e "^CONFIG_SUBSYSTEM_UIMAGE_NAME=" "$(SUBSYSTEM_CONFIG)" | awk -F "=" '{print $$2}' | tr -d '"'); \
	if [ -z "$${uimage}" ]; then \
		uimage=image.ub; \
	fi; \
	eval petalinux-create-bootimage -i $(IMAGEROOT)/vmlinux -d $(PROOT)/subsystems/$(SUBSYSTEM)/hw-description/system.dts $${kernel_loadaddr} -o $(IMAGEROOT)/$${uimage} -c $(SUBSYSTEM_CONFIG)

relocate-uboot:$(IMAGEROOT)/u-boot.elf
	petalinux-reloc-blob -l 0 -i $< -o $(IMAGEROOT)/u-boot-s

package-get-available-components:
	echo "PACKAGEABLE_COMPONENT: kernel"
	echo "PACKAGEABLE_COMPONENT: rootfs"

package-get-available-format:
	echo "IMAGE FORMAT: FIT"

package-kernel-get-available-format:
ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ARCH_ARM=y" "$(SUBSYSTEM_CONFIG)"),)
	echo "IMAGE FORMAT: zImage"
endif
	echo "IMAGE FORMAT: uImage"
ifneq ($(shell grep -e "^CONFIG_SUBSYSTEM_ARCH_MICROBLAZE=y" "$(SUBSYSTEM_CONFIG)"),)
	echo "IMAGE FORMAT: simpleImage.mb"
endif

package-rootfs-get-available-format:
	echo "IMAGE FORMAT: initramfs"
	echo "IMAGE FORMAT: jffs2"
	echo "IMAGE FORMAT: nfsroot"